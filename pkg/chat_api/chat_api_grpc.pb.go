// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat_api.proto

package chat_api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatAPIClient is the client API for ChatAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAPIClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendMeassage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAPIClient(cc grpc.ClientConnInterface) ChatAPIClient {
	return &chatAPIClient{cc}
}

func (c *chatAPIClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/chat_api.ChatAPI/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat_api.ChatAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) SendMeassage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat_api.ChatAPI/SendMeassage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAPIServer is the server API for ChatAPI service.
// All implementations must embed UnimplementedChatAPIServer
// for forward compatibility
type ChatAPIServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	SendMeassage(context.Context, *SendRequest) (*empty.Empty, error)
	mustEmbedUnimplementedChatAPIServer()
}

// UnimplementedChatAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChatAPIServer struct {
}

func (UnimplementedChatAPIServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedChatAPIServer) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatAPIServer) SendMeassage(context.Context, *SendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMeassage not implemented")
}
func (UnimplementedChatAPIServer) mustEmbedUnimplementedChatAPIServer() {}

// UnsafeChatAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAPIServer will
// result in compilation errors.
type UnsafeChatAPIServer interface {
	mustEmbedUnimplementedChatAPIServer()
}

func RegisterChatAPIServer(s grpc.ServiceRegistrar, srv ChatAPIServer) {
	s.RegisterService(&ChatAPI_ServiceDesc, srv)
}

func _ChatAPI_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatAPI/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_SendMeassage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).SendMeassage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_api.ChatAPI/SendMeassage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).SendMeassage(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatAPI_ServiceDesc is the grpc.ServiceDesc for ChatAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_api.ChatAPI",
	HandlerType: (*ChatAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ChatAPI_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatAPI_Delete_Handler,
		},
		{
			MethodName: "SendMeassage",
			Handler:    _ChatAPI_SendMeassage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_api.proto",
}
